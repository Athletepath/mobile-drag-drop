{"version":3,"sources":["/Users/stefansteinhart/Development/Web/ios-html5-drag-drop-shim/src/index.ts"],"names":["detectFeatures","features","dragEvents","document","documentElement","draggable","touchEvents","userAgentSupportingNativeDnD","undefined","isBlinkEngine","window","test","navigator","userAgent","DEBUG","Object","keys","forEach","key","supportsPassiveEventListener","supportsPassiveEventListeners","opts","defineProperty","get","addEventListener","e","onTouchstart","activeDragOperation","dragTarget","tryFindDraggableTarget","DragOperationController","config","dragOperationEnded","err","event","el","target","getAttribute","parentNode","body","_config","state","defaultActionOverride","defaultPrevented","addDocumentListener","ev","handler","passive","supportsPassive","removeDocumentListener","removeEventListener","average","array","length","reduce","s","v","isDOMElement","object","tagName","isTouchIdentifierContainedInTouchEvent","newTouch","touchIdentifier","i","changedTouches","identifier","createDragEventFromTouch","targetElement","type","cancelable","dataTransfer","relatedTarget","touch","dndEvent","Event","bubbles","screenX","screenY","clientX","clientY","pageX","pageY","targetRect","getBoundingClientRect","offsetX","left","offsetY","top","updateCentroidCoordinatesOfTouchesIn","coordinateProp","outPoint","pageXs","pageYs","touches","push","x","y","prepareNodeCopyAsDragImage","srcNode","dstNode","nodeType","cs","getComputedStyle","csName","style","setProperty","getPropertyValue","getPropertyPriority","pointerEvents","removeAttribute","hasChildNodes","childNodes","createDragImage","sourceNode","dragImage","cloneNode","position","zIndex","classList","add","CLASS_DRAG_IMAGE","CLASS_DRAG_OPERATION_ICON","extractTransformStyles","TRANSFORM_CSS_VENDOR_PREFIXES","map","prefix","transform","replace","translateDragImage","pnt","originalTransforms","offset","centerOnCoordinates","parseInt","offsetWidth","offsetHeight","translate","transformProp","applyDragImageSnapback","sourceEl","dragImageTransforms","transitionEndCb","visibility","display","CLASS_DRAG_IMAGE_SNAPBACK","csDragImage","durationInS","parseFloat","transitionDuration","isNaN","rect","scrollLeft","scrollTop","marginLeft","marginTop","delayInS","transitionDelay","durationInMs","Math","round","setTimeout","determineDropEffect","effectAllowed","ALLOWED_EFFECTS","DROP_EFFECTS","indexOf","dispatchDragEvent","dragEvent","touchEvent","dataStore","debug_class","CLASS_PREFIX","debug_class_event_target","debug_class_event_related_target","leaveEvt","defaultView","cancelled","dispatchEvent","_mode","remove","determineDragOperation","dropEffect","onDelayTouchstart","evt","onReleasedItem","end","off","cancel","scroll","clearTimeout","timer","holdToDrag","onEvt","capture","options","iterationInterval","_initialEvent","_sourceNode","_dragOperationEndedCb","this","_dragOperationState","_immediateUserSelection","_currentDropTarget","_lastTouchEvent","_initialTouch","_touchMoveHandler","_onTouchMove","bind","_touchEndOrCancelHandler","_onTouchEndOrCancel","prototype","_setup","_this","_currentDragOperation","_dragDataStore","_data","_effectAllowed","_types","_currentHotspotCoordinates","_dragImagePageCoordinates","dragImageSrc","_dataTransfer","DataTransfer","element","_dragImageOffset","_cleanup","_dragImage","_dragImageTransforms","dragImageOffset","dragImageCenterOnTouch","width","height","appendChild","_iterationIntervalId","setInterval","_iterationLock","_dragAndDropProcessModelIteration","clearInterval","removeChild","startDrag","dragStartConditionOverride","preventDefault","dragImageTranslateOverride","handledDragImageTranslate_1","debug_class_user_selection","debug_class_drop_target","previousDragOperation","dragCancelled","_dragOperationEnded","_finishDragOperation","newUserSelection","elementFromPoint","previousTargetElement","currentDragOperationClass","contains","dragFailed","_dataStore","_setDragImageHandler","_dropEffect","value","freeze","setData","data","Error","getData","clearData","format","index","splice","setDragImage","image","override","forceApply","detectedFeatures"],"mappings":"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","file":"index.min.js","sourcesContent":["// debug mode, which will highlight drop target, immediate user selection and events fired as you interact.\nconst DEBUG = false;\n\n//<editor-fold desc=\"feature detection\">\n\ninterface DetectedFeatures {\n    draggable:boolean;\n    dragEvents:boolean;\n    touchEvents:boolean;\n    userAgentSupportingNativeDnD:boolean;\n}\n\nfunction detectFeatures():DetectedFeatures {\n\n    let features:DetectedFeatures = {\n        dragEvents: (\"ondragstart\" in document.documentElement),\n        draggable: (\"draggable\" in document.documentElement),\n        touchEvents: (\"ontouchstart\" in document.documentElement),\n        userAgentSupportingNativeDnD: undefined\n    };\n\n    const isBlinkEngine = !!((<any>window).chrome) || /chrome/i.test(navigator.userAgent);\n\n    features.userAgentSupportingNativeDnD = !(\n        // if is mobile safari or android browser -> no native dnd\n        (/iPad|iPhone|iPod|Android/.test(navigator.userAgent))\n        || // OR\n        //if is blink(chrome/opera) with touch events enabled -> no native dnd\n        (isBlinkEngine && features.touchEvents)\n    );\n\n    if (DEBUG) {\n        Object.keys(features).forEach(function (key) {\n            console.log(\"dnd-poly: detected feature '\" + key + \" = \" + features[key] + \"'\");\n        });\n    }\n\n    return features;\n}\n\nlet supportsPassive:boolean;\n\nfunction supportsPassiveEventListener():boolean {\n\n    let supportsPassiveEventListeners = false;\n\n    // reference https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n    try {\n        let opts = Object.defineProperty({}, \"passive\", {\n            get: function () {\n                supportsPassiveEventListeners = true;\n            }\n        });\n        window.addEventListener(\"test\", null, opts);\n    }\n        // tslint:disable-next-line:no-empty\n    catch (e) {\n    }\n\n    return supportsPassiveEventListeners;\n}\n\n//</editor-fold>\n\n//<editor-fold desc=\"public api\">\n\n// function signature for the dragImageTranslateOverride hook\nexport type DragImageTranslateOverrideFn = (// corresponding touchmove event\n    event:TouchEvent,\n    // the processed touch event viewport coordinates\n    hoverCoordinates:Point,\n    // the element under the calculated touch coordinates\n    hoveredElement:HTMLElement,\n    // callback for updating the drag image offset\n    translateDragImageFn:(offsetX:number, offsetY:number) => void) => void;\n\nexport interface Config {\n    // flag to force the polyfill being applied and not rely on internal feature detection\n    forceApply?:boolean;\n    // useful for when you want the default drag image but still want to apply\n    // some static offset from touch coordinates to drag image coordinates\n    // defaults to (0,0)\n    dragImageOffset?:Point;\n    // if the dragImage shall be centered on the touch coordinates\n    // defaults to false\n    dragImageCenterOnTouch?:boolean;\n    // the drag and drop operation involves some processing. here you can specify in what interval this processing takes place.\n    // defaults to 150ms\n    iterationInterval?:number;\n    // hook for custom logic that decides if a drag operation should start\n    dragStartConditionOverride?:(event:TouchEvent) => boolean;\n    // hook for custom logic that can manipulate the drag image translate offset\n    dragImageTranslateOverride?:DragImageTranslateOverrideFn;\n    // hook for custom logic that can override the default action based on the original touch event when the drag never started\n    // be sure to call event.preventDefault() if handling the default action in the override to prevent the browser default.\n    defaultActionOverride?:(event:TouchEvent) => void;\n    // Drag action delay on touch devices (\"hold to drag\" functionality, useful for scrolling draggable items). Defaults to no delay.\n    holdToDrag?:number;\n}\n\n// default config\nconst config:Config = {\n    iterationInterval: 150,\n};\n\nexport function polyfill(override?:Config):boolean {\n\n    if (override) {\n        // overwrite default config with user config\n        Object.keys(override).forEach(function (key) {\n            config[key] = override[key];\n        });\n    }\n\n    // only do feature detection when config does not force apply the polyfill\n    if (!config.forceApply) {\n\n        // feature/browser detection\n        const detectedFeatures = detectFeatures();\n\n        // check if native drag and drop support is there\n        if (detectedFeatures.userAgentSupportingNativeDnD\n            && detectedFeatures.draggable\n            && detectedFeatures.dragEvents) {\n            // no polyfilling required\n            return false;\n        }\n    }\n\n    console.log(\"dnd-poly: Applying mobile drag and drop polyfill.\");\n\n    supportsPassive = supportsPassiveEventListener();\n\n    // add listeners suitable for detecting a potential drag operation\n    if (config.holdToDrag) {\n\n        console.log(\"dnd-poly: holdToDrag set to \" + config.holdToDrag);\n\n        addDocumentListener(\"touchstart\", onDelayTouchstart, false);\n    }\n    else {\n\n        addDocumentListener(\"touchstart\", onTouchstart, false);\n    }\n\n    return true;\n}\n\n//</editor-fold>\n\n//<editor-fold desc=\"drag operation start/end\">\n\n// reference the currently active drag operation\nlet activeDragOperation:DragOperationController;\n\n/**\n * event handler listening for initial events that possibly start a drag and drop operation.\n */\nfunction onTouchstart(e:TouchEvent) {\n\n    console.log(\"dnd-poly: touchstart\");\n\n    // From the moment that the user agent is to initiate the drag-and-drop operation,\n    // until the end of the drag-and-drop operation, device input events (e.g. mouse and keyboard events) must be suppressed.\n\n    // only allow one drag operation at a time\n    if (activeDragOperation) {\n        console.log(\"dnd-poly: drag operation already active\");\n        return;\n    }\n\n    let dragTarget = tryFindDraggableTarget(e);\n\n    // If there is no such element, then nothing is being dragged; abort these\n    // steps, the drag-and-drop operation is never started.\n    if (!dragTarget) {\n        console.log(\"dnd-poly: no draggable at touchstart coordinates\");\n        return;\n    }\n\n    try {\n        activeDragOperation = new DragOperationController(e, config, <HTMLElement>dragTarget, dragOperationEnded);\n    }\n    catch (err) {\n        dragOperationEnded(config, e, DragOperationState.CANCELLED);\n        // rethrow exception after cleanup\n        throw err;\n    }\n}\n\n/**\n * Search for a possible draggable item upon an event that can initialize a drag operation.\n */\nfunction tryFindDraggableTarget(event:TouchEvent):Element {\n\n    //1. Determine what is being dragged, as follows:\n\n    // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n    // If the drag operation was invoked on a selection, then it is the selection that is being dragged.\n    //if( (<Element>event.target).nodeType === 3 ) {\n    //\n    //    config.log( \"drag on text\" );\n    //    return <Element>event.target;\n    //}\n    //Otherwise, if the drag operation was invoked on a Document, it is the first element, going up the ancestor chain, starting at the node that the\n    // user tried to drag, that has the IDL attribute draggable set to true.\n    //else {\n\n    let el = <HTMLElement>event.target;\n\n    do {\n        if (el.draggable === false) {\n            continue;\n        }\n        if (el.getAttribute && el.getAttribute(\"draggable\") === \"true\") {\n            return el;\n        }\n    } while ((el = <HTMLElement>el.parentNode) && el !== document.body);\n}\n\n/**\n * Implements callback invoked when a drag operation has ended or crashed.\n */\nfunction dragOperationEnded(_config:Config, event:TouchEvent, state:DragOperationState) {\n\n    // we need to make the default action happen only when no drag operation took place\n    if (state === DragOperationState.POTENTIAL) {\n\n        console.log(\"dnd-poly: Drag never started. Last event was \" + event.type);\n\n        // when lifecycle hook is present\n        if (_config.defaultActionOverride) {\n\n            try {\n\n                _config.defaultActionOverride(event);\n\n                if (event.defaultPrevented) {\n\n                    console.log(\"dnd-poly: defaultActionOverride has taken care of triggering the default action. preventing default on original event\");\n                }\n\n            }\n            catch (e) {\n\n                console.log(\"dnd-poly: error in defaultActionOverride: \" + e);\n            }\n        }\n    }\n\n    // reset drag operation container\n    activeDragOperation = null;\n}\n\n//</editor-fold>\n\n//<editor-fold desc=\"drag operation\">\n\n/**\n * For tracking the different states of a drag operation.\n */\nconst enum DragOperationState {\n    // initial state of a controller, if no movement is detected the operation ends with this state\n    POTENTIAL,\n    // after movement is detected the drag operation starts and keeps this state until it ends\n    STARTED,\n    // when the drag operation ended normally\n    ENDED,\n    // when the drag operation ended with a cancelled input event\n    CANCELLED\n}\n\n// contains all possible values of the effectAllowed property\nconst enum EFFECT_ALLOWED {\n    NONE = 0,\n    COPY = 1,\n    COPY_LINK = 2,\n    COPY_MOVE = 3,\n    LINK = 4,\n    LINK_MOVE = 5,\n    MOVE = 6,\n    ALL = 7\n}\n\nconst ALLOWED_EFFECTS = [\"none\", \"copy\", \"copyLink\", \"copyMove\", \"link\", \"linkMove\", \"move\", \"all\"];\n\n// contains all possible values of the dropEffect property\nconst enum DROP_EFFECT {\n    NONE = 0,\n    COPY = 1,\n    MOVE = 2,\n    LINK = 3,\n}\n\nconst DROP_EFFECTS = [\"none\", \"copy\", \"move\", \"link\"];\n\n// cross-browser css transform property prefixes\nconst TRANSFORM_CSS_VENDOR_PREFIXES = [\"\", \"-webkit-\"];\n// css classes\nconst CLASS_PREFIX = \"dnd-poly-\";\nconst CLASS_DRAG_IMAGE = CLASS_PREFIX + \"drag-image\";\nconst CLASS_DRAG_IMAGE_SNAPBACK = CLASS_PREFIX + \"snapback\";\nconst CLASS_DRAG_OPERATION_ICON = CLASS_PREFIX + \"icon\";\n\n/**\n * Aims to implement the HTML5 d'n'd spec (https://html.spec.whatwg.org/multipage/interaction.html#dnd) as close as it can get.\n * Note that all props that are private should start with an underscore to enable better minification.\n *\n * TODO remove lengthy spec comments in favor of short references to the spec\n */\nclass DragOperationController {\n\n    private _dragOperationState:DragOperationState = DragOperationState.POTENTIAL;\n\n    private _dragImage:HTMLElement;\n    private _dragImageTransforms:string[];\n    private _dragImagePageCoordinates:Point; // the current page coordinates of the dragImage\n    private _dragImageOffset:Point; // offset of the drag image relative to the coordinates\n\n    private _currentHotspotCoordinates:Point;    // the point relative to viewport for determining the immediate user selection\n\n    private _immediateUserSelection:HTMLElement = null;  // the element the user currently hovers while dragging\n    private _currentDropTarget:HTMLElement = null;   // the element that was selected as a valid drop target by the d'n'd operation\n\n    private _dragDataStore:DragDataStore;\n    private _dataTransfer:DataTransfer;\n\n    private _currentDragOperation:string;    // the current drag operation set according to the d'n'd processing model\n\n    private _initialTouch:Touch;  // the identifier for the touch that initiated the drag operation\n    private _touchMoveHandler:EventListener;\n    private _touchEndOrCancelHandler:EventListener;\n    private _lastTouchEvent:TouchEvent;\n\n    private _iterationLock:boolean;\n    private _iterationIntervalId:number;\n\n    constructor(private _initialEvent:TouchEvent,\n                private _config:Config,\n                private _sourceNode:HTMLElement,\n                private _dragOperationEndedCb:(config:Config, event:TouchEvent, state:DragOperationState) => void) {\n\n        console.log(\"dnd-poly: setting up potential drag operation..\");\n\n        this._lastTouchEvent = _initialEvent;\n        this._initialTouch = _initialEvent.changedTouches[0];\n\n        // create bound event listeners\n        this._touchMoveHandler = this._onTouchMove.bind(this);\n        this._touchEndOrCancelHandler = this._onTouchEndOrCancel.bind(this);\n        addDocumentListener(\"touchmove\", this._touchMoveHandler, false);\n        addDocumentListener(\"touchend\", this._touchEndOrCancelHandler, false);\n        addDocumentListener(\"touchcancel\", this._touchEndOrCancelHandler, false);\n\n        // the only thing we do is setup the touch listeners. if drag will really start is decided in touch move handler.\n\n        //<spec>\n\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n        // 3. Establish which DOM node is the source node, as follows:\n        // If it is a selection that is being dragged, then the source node is the text node that the user started the drag on (typically the text node\n        // that the user originally clicked). If the user did not specify a particular node, for example if the user just told the user agent to begin\n        // a drag of \"the selection\", then the source node is the first text node containing a part of the selection.  Otherwise, if it is an element\n        // that is being dragged, then the source node is the element that is being dragged.  Otherwise, the source node is part of another document or\n        // application. When this specification requires that an event be dispatched at the source node in this case, the user agent must instead\n        // follow the platform-specific conventions relevant to that situation.\n\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n        // 4. Determine the list of dragged nodes, as follows:\n\n        //    If it is a selection that is being dragged, then the list of dragged nodes contains, in tree order, every node that is partially or\n        // completely included in the selection (including all their ancestors).\n\n        //    Otherwise, the list of dragged nodes contains only the source node, if any.\n\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n        // 5. If it is a selection that is being dragged, then add an item to the drag data store item list, with its properties set as follows:\n\n        //The drag data item type string\n        //\"text/plain\"\n        //The drag data item kind\n        //Plain Unicode string\n        //The actual data\n        //The text of the selection\n        //Otherwise, if any files are being dragged, then add one item per file to the drag data store item list, with their properties set as follows:\n        //\n        //The drag data item type string\n        //The MIME type of the file, if known, or \"application/octet-stream\" otherwise.\n        //    The drag data item kind\n        //File\n        //The actual data\n        //The file's contents and name.\n        //Dragging files can currently only happen from outside a browsing context, for example from a file system manager application.\n        //\n        //    If the drag initiated outside of the application, the user agent must add items to the drag data store item list as appropriate for the data\n        // being dragged, honoring platform conventions where appropriate; however, if the platform conventions do not use MIME types to label dragged\n        // data, the user agent must make a best-effort attempt to map the types to MIME types, and, in any case, all the drag data item type strings must\n        // be converted to ASCII lowercase.  Perform drag-and-drop initialization steps defined in any other applicable specifications.\n\n        //</spec>\n    }\n\n    //<editor-fold desc=\"setup/teardown\">\n\n    /**\n     * Setup dragImage, input listeners and the drag\n     * and drop process model iteration interval.\n     */\n    private _setup():boolean {\n        console.log(\"dnd-poly: starting drag and drop operation\");\n\n        this._dragOperationState = DragOperationState.STARTED;\n\n        this._currentDragOperation = DROP_EFFECTS[DROP_EFFECT.NONE];\n\n        this._dragDataStore = {\n            _data: {},\n            _effectAllowed: undefined,\n            _mode: DragDataStoreMode.PROTECTED,\n            _types: [],\n        };\n\n        this._currentHotspotCoordinates = {\n            x: null,\n            y: null\n        };\n\n        this._dragImagePageCoordinates = {\n            x: null,\n            y: null\n        };\n\n        let dragImageSrc:HTMLElement = this._sourceNode;\n\n        this._dataTransfer = new DataTransfer(this._dragDataStore, (element:HTMLElement, x:number, y:number) => {\n\n            dragImageSrc = element;\n\n            if (typeof x === \"number\" || typeof y === \"number\") {\n                this._dragImageOffset = {\n                    x: x || 0,\n                    y: y || 0\n                };\n            }\n        });\n\n        // 9. Fire a DND event named dragstart at the source node.\n        this._dragDataStore._mode = DragDataStoreMode.READWRITE;\n        this._dataTransfer.dropEffect = DROP_EFFECTS[DROP_EFFECT.NONE];\n        if (dispatchDragEvent(\"dragstart\", this._sourceNode, this._lastTouchEvent, this._dragDataStore, this._dataTransfer)) {\n            console.log(\"dnd-poly: dragstart cancelled\");\n            // dragstart has been prevented -> cancel d'n'd\n            this._dragOperationState = DragOperationState.CANCELLED;\n            this._cleanup();\n            return false;\n        }\n\n        updateCentroidCoordinatesOfTouchesIn(\"page\", this._lastTouchEvent, this._dragImagePageCoordinates);\n        this._dragImage = createDragImage(dragImageSrc);\n        this._dragImageTransforms = extractTransformStyles(this._dragImage);\n\n        if (!this._dragImageOffset) {\n\n            // apply specific offset\n            if (this._config.dragImageOffset) {\n\n                this._dragImageOffset = {\n                    x: this._config.dragImageOffset.x,\n                    y: this._config.dragImageOffset.y\n                };\n            }\n            // center drag image on touch coordinates\n            else if (this._config.dragImageCenterOnTouch) {\n\n                const cs = getComputedStyle(dragImageSrc);\n                this._dragImageOffset = {\n                    x: 0 - parseInt(cs.marginLeft, 10),\n                    y: 0 - parseInt(cs.marginTop, 10)\n                };\n            }\n            // by default initialize drag image offset the same as desktop\n            else {\n\n                const targetRect = dragImageSrc.getBoundingClientRect();\n                const cs = getComputedStyle(dragImageSrc);\n                this._dragImageOffset = {\n                    x: targetRect.left - this._initialTouch.clientX - parseInt(cs.marginLeft, 10) + targetRect.width / 2,\n                    y: targetRect.top - this._initialTouch.clientY - parseInt(cs.marginTop, 10) + targetRect.height / 2\n                };\n            }\n        }\n\n        translateDragImage(this._dragImage, this._dragImagePageCoordinates, this._dragImageTransforms, this._dragImageOffset, this._config.dragImageCenterOnTouch);\n        document.body.appendChild(this._dragImage);\n\n        // 10. Initiate the drag-and-drop operation in a manner consistent with platform conventions, and as described below.\n        this._iterationIntervalId = window.setInterval(() => {\n\n            // If the user agent is still performing the previous iteration of the sequence (if any) when the next iteration becomes due,\n            // abort these steps for this iteration (effectively \"skipping missed frames\" of the drag-and-drop operation).\n            if (this._iterationLock) {\n                console.log(\"dnd-poly: iteration skipped because previous iteration hast not yet finished.\");\n                return;\n            }\n            this._iterationLock = true;\n\n            this._dragAndDropProcessModelIteration();\n\n            this._iterationLock = false;\n        }, this._config.iterationInterval);\n\n        return true;\n    }\n\n    private _cleanup() {\n\n        console.log(\"dnd-poly: cleanup\");\n\n        if (this._iterationIntervalId) {\n            clearInterval(this._iterationIntervalId);\n            this._iterationIntervalId = null;\n        }\n\n        removeDocumentListener(\"touchmove\", this._touchMoveHandler);\n        removeDocumentListener(\"touchend\", this._touchEndOrCancelHandler);\n        removeDocumentListener(\"touchcancel\", this._touchEndOrCancelHandler);\n\n        if (this._dragImage) {\n            this._dragImage.parentNode.removeChild(this._dragImage);\n            this._dragImage = null;\n        }\n\n        this._dragOperationEndedCb(this._config, this._lastTouchEvent, this._dragOperationState);\n    }\n\n    //</editor-fold>\n\n    //<editor-fold desc=\"touch handlers\">\n\n    private _onTouchMove(event:TouchEvent) {\n\n        // filter unrelated touches\n        if (isTouchIdentifierContainedInTouchEvent(event, this._initialTouch.identifier) === false) {\n            return;\n        }\n\n        // update the reference to the last received touch event\n        this._lastTouchEvent = event;\n\n        // drag operation did not start yet but on movement it should start\n        if (this._dragOperationState === DragOperationState.POTENTIAL) {\n\n            let startDrag:boolean;\n\n            // is a lifecycle hook present?\n            if (this._config.dragStartConditionOverride) {\n\n                try {\n                    startDrag = this._config.dragStartConditionOverride(event);\n                }\n                catch (e) {\n                    console.error(\"dnd-poly: error in dragStartConditionOverride hook: \" + e);\n                    startDrag = false;\n                }\n            }\n            else {\n\n                // by default only allow a single moving finger to initiate a drag operation\n                startDrag = (event.touches.length === 1);\n            }\n\n            if (!startDrag) {\n\n                this._cleanup();\n                return;\n            }\n\n            // setup will return true when drag operation starts\n            if (this._setup() === true) {\n\n                // prevent scrolling when drag operation starts\n                this._initialEvent.preventDefault();\n                event.preventDefault();\n            }\n\n            return;\n        }\n\n        console.log(\"dnd-poly: moving draggable..\");\n\n        // we emulate d'n'd so we dont want any defaults to apply\n        event.preventDefault();\n\n        // populate shared coordinates from touch event\n        updateCentroidCoordinatesOfTouchesIn(\"client\", event, this._currentHotspotCoordinates);\n        updateCentroidCoordinatesOfTouchesIn(\"page\", event, this._dragImagePageCoordinates);\n\n        if (this._config.dragImageTranslateOverride) {\n\n            try {\n\n                let handledDragImageTranslate = false;\n\n                this._config.dragImageTranslateOverride(\n                    event,\n                    {\n                        x: this._currentHotspotCoordinates.x,\n                        y: this._currentHotspotCoordinates.y\n                    },\n                    this._immediateUserSelection,\n                    (offsetX:number, offsetY:number) => {\n\n                        // preventing translation of drag image when there was a drag operation cleanup meanwhile\n                        if (!this._dragImage) {\n                            return;\n                        }\n\n                        handledDragImageTranslate = true;\n\n                        this._currentHotspotCoordinates.x += offsetX;\n                        this._currentHotspotCoordinates.y += offsetY;\n                        this._dragImagePageCoordinates.x += offsetX;\n                        this._dragImagePageCoordinates.y += offsetY;\n\n                        translateDragImage(\n                            this._dragImage,\n                            this._dragImagePageCoordinates,\n                            this._dragImageTransforms,\n                            this._dragImageOffset,\n                            this._config.dragImageCenterOnTouch\n                        );\n                    }\n                );\n\n                if (handledDragImageTranslate) {\n                    return;\n                }\n            }\n            catch (e) {\n                console.log(\"dnd-poly: error in dragImageTranslateOverride hook: \" + e);\n            }\n        }\n\n        translateDragImage(this._dragImage, this._dragImagePageCoordinates, this._dragImageTransforms, this._dragImageOffset, this._config.dragImageCenterOnTouch);\n    }\n\n    private _onTouchEndOrCancel(event:TouchEvent) {\n\n        // filter unrelated touches\n        if (isTouchIdentifierContainedInTouchEvent(event, this._initialTouch.identifier) === false) {\n            return;\n        }\n\n        // let the dragImageTranslateOverride know that its over\n        if (this._config.dragImageTranslateOverride) {\n            try {\n                /* tslint:disable */\n                this._config.dragImageTranslateOverride(undefined, undefined, undefined, function () {\n                });\n            }\n            catch (e) {\n                console.log(\"dnd-poly: error in dragImageTranslateOverride hook: \" + e);\n            }\n        }\n\n        // drag operation did not even start\n        if (this._dragOperationState === DragOperationState.POTENTIAL) {\n            this._cleanup();\n            return;\n        }\n\n        // we emulate d'n'd so we dont want any defaults to apply\n        event.preventDefault();\n\n        this._dragOperationState = (event.type === \"touchcancel\") ? DragOperationState.CANCELLED : DragOperationState.ENDED;\n    }\n\n    //</editor-fold>\n\n    //<editor-fold desc=\"dnd spec logic\">\n\n    /**\n     * according to https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\n     */\n    private _dragAndDropProcessModelIteration():void {\n\n        if (DEBUG) {\n            var debug_class = CLASS_PREFIX + \"debug\",\n                debug_class_user_selection = CLASS_PREFIX + \"immediate-user-selection\",\n                debug_class_drop_target = CLASS_PREFIX + \"current-drop-target\";\n        }\n\n        const previousDragOperation = this._currentDragOperation;\n\n        // Fire a DND event named drag event at the source node.\n        this._dragDataStore._mode = DragDataStoreMode.PROTECTED;\n        this._dataTransfer.dropEffect = DROP_EFFECTS[DROP_EFFECT.NONE];\n        const dragCancelled = dispatchDragEvent(\"drag\", this._sourceNode, this._lastTouchEvent, this._dragDataStore, this._dataTransfer);\n        if (dragCancelled) {\n            console.log(\"dnd-poly: drag event cancelled.\");\n            // If this event is canceled, the user agent must set the current drag operation to \"none\" (no drag operation).\n            this._currentDragOperation = DROP_EFFECTS[DROP_EFFECT.NONE];\n        }\n\n        // Otherwise, if the user ended the drag-and-drop operation (e.g. by releasing the mouse button in a mouse-driven drag-and-drop interface),\n        // or if the drag event was canceled, then this will be the last iteration.\n        if (dragCancelled || this._dragOperationState === DragOperationState.ENDED || this._dragOperationState === DragOperationState.CANCELLED) {\n\n            const dragFailed = this._dragOperationEnded(this._dragOperationState);\n\n            // if drag failed transition snap back\n            if (dragFailed) {\n\n                applyDragImageSnapback(this._sourceNode, this._dragImage, this._dragImageTransforms, () => {\n                    this._finishDragOperation();\n                });\n                return;\n            }\n\n            // Otherwise immediately\n            // Fire a DND event named dragend at the source node.\n            this._finishDragOperation();\n            return;\n        }\n\n        // If the drag event was not canceled and the user has not ended the drag-and-drop operation,\n        // check the state of the drag-and-drop operation, as follows:\n        const newUserSelection:HTMLElement = <HTMLElement>document.elementFromPoint(this._currentHotspotCoordinates.x, this._currentHotspotCoordinates.y);\n\n        console.log(\"dnd-poly: new immediate user selection is: \" + newUserSelection);\n\n        const previousTargetElement = this._currentDropTarget;\n\n        // If the user is indicating a different immediate user selection than during the last iteration (or if this is the first iteration),\n        // and if this immediate user selection is not the same as the current target element,\n        // then fire a DND event named dragexit at the current target element,\n        // and then update the current target element as follows:\n        if (newUserSelection !== this._immediateUserSelection && newUserSelection !== this._currentDropTarget) {\n\n            if (DEBUG) {\n\n                if (this._immediateUserSelection) {\n                    this._immediateUserSelection.classList.remove(debug_class_user_selection);\n                }\n\n                if (newUserSelection) {\n                    newUserSelection.classList.add(debug_class);\n                    newUserSelection.classList.add(debug_class_user_selection);\n                }\n            }\n\n            this._immediateUserSelection = newUserSelection;\n\n            if (this._currentDropTarget !== null) {\n                this._dragDataStore._mode = DragDataStoreMode.PROTECTED;\n                this._dataTransfer.dropEffect = DROP_EFFECTS[DROP_EFFECT.NONE];\n                dispatchDragEvent(\"dragexit\", this._currentDropTarget, this._lastTouchEvent, this._dragDataStore, this._dataTransfer, false);\n            }\n\n            // If the new immediate user selection is null\n            if (this._immediateUserSelection === null) {\n                //Set the current target element to null also.\n                this._currentDropTarget = this._immediateUserSelection;\n\n                console.log(\"dnd-poly: current drop target changed to null\");\n            }\n            // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n            // If the new immediate user selection is in a non-DOM document or application\n            // else if() {\n            //      Set the current target element to the immediate user selection.\n            //      this.currentDropTarget = this.immediateUserSelection;\n            //      return;\n            // }\n            // Otherwise\n            else {\n                // Fire a DND event named dragenter at the immediate user selection.\n                //the polyfill cannot determine if a handler even exists as browsers do to silently\n                // allow drop when no listener existed, so this event MUST be handled by the client\n                this._dragDataStore._mode = DragDataStoreMode.PROTECTED;\n                this._dataTransfer.dropEffect = determineDropEffect(this._dragDataStore._effectAllowed, this._sourceNode);\n                if (dispatchDragEvent(\"dragenter\", this._immediateUserSelection, this._lastTouchEvent, this._dragDataStore, this._dataTransfer)) {\n                    console.log(\"dnd-poly: dragenter default prevented\");\n                    // If the event is canceled, then set the current target element to the immediate user selection.\n                    this._currentDropTarget = this._immediateUserSelection;\n                    this._currentDragOperation = determineDragOperation(this._dataTransfer.effectAllowed, this._dataTransfer.dropEffect);\n                }\n                // Otherwise, run the appropriate step from the following list:\n                else {\n\n                    // NO DROPZONE SUPPORT SINCE NATIVE IMPLEMENTATIONS IN BROWSERS ALSO DO NOT\n                    //console.log( \"dnd-poly: dragenter not prevented, searching for dropzone..\" );\n                    //var newTarget = DragOperationController.FindDropzoneElement( this.immediateUserSelection );\n\n                    // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n                    // If the current target element is a text field (e.g. textarea, or an input element whose type attribute is in the Text state) or an\n                    // editable element, and the drag data store item list has an item with the drag data item type string \"text/plain\" and the drag data\n                    // item kind Plain Unicode string\n                    //if( ElementIsTextDropzone( this.immediateUserSelection, this.dragDataStore ) ) {\n                    //Set the current target element to the immediate user selection anyway.\n                    //this.currentDropTarget = this.immediateUserSelection;\n                    //}\n                    //else\n                    // If the current target element is an element with a dropzone attribute that matches the drag data store\n                    //if( newTarget === this.immediateUserSelection &&\n                    //    DragOperationController.GetOperationForMatchingDropzone( this.immediateUserSelection, this.dragDataStore ) !== \"none\" ) {\n                    // Set the current target element to the immediate user selection anyway.\n                    //    this.currentDropTarget = this.immediateUserSelection;\n                    //}\n                    // If the immediate user selection is an element that itself has an ancestor element\n                    // with a dropzone attribute that matches the drag data store\n                    // NO DROPZONE SUPPORT SINCE NATIVE IMPLEMENTATIONS IN BROWSERS ALSO DO NOT\n                    //else if( newTarget !== null && DragOperationController.GetOperationForMatchingDropzone( newTarget, this.dragDataStore ) ) {\n\n                    // If the immediate user selection is new target, then leave the current target element unchanged.\n\n                    // Otherwise, fire a DND event named dragenter at new target, with the current target element\n                    // as the specific related target. Then, set the current target element to new target,\n                    // regardless of whether that event was canceled or not.\n                    //this.dragenter( newTarget, this.currentDropTarget );\n                    //this.currentDropTarget = newTarget;\n                    //}\n                    // If the current target element is not the body element\n                    //else\n                    if (this._immediateUserSelection !== document.body) {\n                        // Fire a DND event named dragenter at the body element, and set the current target element to the body element, regardless of\n                        // whether that event was canceled or not.\n                        // Note: If the body element is null, then the event will be fired at the Document object (as\n                        // required by the definition of the body element), but the current target element would be set to null, not the Document object.\n\n                        // We do not listen to what the spec says here because this results in doubled events on the body/document because if the first one\n                        // was not cancelled it will have bubbled up to the body already ;)\n                        //  this.dragenter( window.document.body );\n                        this._currentDropTarget = document.body;\n                    }\n                    // Otherwise\n                    //else {\n                    // leave the current drop target unchanged\n                    //}\n                }\n            }\n        }\n\n        // If the previous step caused the current target element to change,\n        // and if the previous target element was not null or a part of a non-DOM document,\n        // then fire a DND event named dragleave at the previous target element.\n        if (previousTargetElement !== this._currentDropTarget && (isDOMElement(previousTargetElement))) {\n\n            if (DEBUG) {\n                previousTargetElement.classList.remove(debug_class_drop_target);\n            }\n\n            console.log(\"dnd-poly: current drop target changed.\");\n\n            this._dragDataStore._mode = DragDataStoreMode.PROTECTED;\n            this._dataTransfer.dropEffect = DROP_EFFECTS[DROP_EFFECT.NONE];\n            dispatchDragEvent(\"dragleave\", previousTargetElement, this._lastTouchEvent, this._dragDataStore, this._dataTransfer, false, this._currentDropTarget);\n        }\n\n        // If the current target element is a DOM element, then fire a DND event named dragover at this current target element.\n        if (isDOMElement(this._currentDropTarget)) {\n\n            if (DEBUG) {\n                this._currentDropTarget.classList.add(debug_class);\n                this._currentDropTarget.classList.add(debug_class_drop_target);\n            }\n\n            // If the dragover event is not canceled, run the appropriate step from the following list:\n            this._dragDataStore._mode = DragDataStoreMode.PROTECTED;\n            this._dataTransfer.dropEffect = determineDropEffect(this._dragDataStore._effectAllowed, this._sourceNode);\n            if (dispatchDragEvent(\"dragover\", this._currentDropTarget, this._lastTouchEvent, this._dragDataStore, this._dataTransfer) === false) {\n\n                console.log(\"dnd-poly: dragover not prevented on possible drop-target.\");\n                // NO DROPZONE SUPPORT SINCE NATIVE IMPLEMENTATIONS IN BROWSERS ALSO DO NOT\n\n                // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n                // If the current target element is a text field (e.g. textarea, or an input element whose type attribute is in the Text state) or\n                // an editable element, and the drag data store item list has an item with the drag data item type string \"text/plain\" and the drag\n                // data item kind Plain Unicode string\n                //if( ElementIsTextDropzone( this.currentDropTarget, this.dragDataStore ) ) {\n                // Set the current drag operation to either \"copy\" or \"move\", as appropriate given the platform conventions.\n                //this.currentDragOperation = \"copy\"; //or move. spec says its platform specific behaviour.\n                //}\n                //else {\n                // If the current target element is an element with a dropzone attribute that matches the drag data store\n                //this.currentDragOperation = DragOperationController.GetOperationForMatchingDropzone( this.currentDropTarget, this.dragDataStore );\n                //}\n                // when dragover is not prevented and no dropzones are there, no drag operation\n                this._currentDragOperation = DROP_EFFECTS[DROP_EFFECT.NONE];\n            }\n            // Otherwise (if the dragover event is canceled), set the current drag operation based on the values of the effectAllowed and\n            // dropEffect attributes of the DragEvent object's dataTransfer object as they stood after the event dispatch finished\n            else {\n\n                console.log(\"dnd-poly: dragover prevented.\");\n\n                this._currentDragOperation = determineDragOperation(this._dataTransfer.effectAllowed, this._dataTransfer.dropEffect);\n            }\n        }\n\n        console.log(\"dnd-poly: d'n'd iteration ended. current drag operation: \" + this._currentDragOperation);\n\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n        // Otherwise, if the current target element is not a DOM element, use platform-specific mechanisms to determine what drag operation is\n        // being performed (none, copy, link, or move), and set the current drag operation accordingly.\n\n        //Update the drag feedback (e.g. the mouse cursor) to match the current drag operation, as follows:\n        // ---------------------------------------------------------------------------------------------------------\n        // Drag operation   |\tFeedback\n        // \"copy\"\t        |  Data will be copied if dropped here.\n        // \"link\"\t        |  Data will be linked if dropped here.\n        // \"move\"\t        |  Data will be moved if dropped here.\n        // \"none\"\t        |  No operation allowed, dropping here will cancel the drag-and-drop operation.\n        // ---------------------------------------------------------------------------------------------------------\n\n        if (previousDragOperation !== this._currentDragOperation) {\n            this._dragImage.classList.remove(CLASS_PREFIX + previousDragOperation);\n        }\n\n        const currentDragOperationClass = CLASS_PREFIX + this._currentDragOperation;\n\n        if (this._dragImage.classList.contains(currentDragOperationClass) === false) {\n            this._dragImage.classList.add(currentDragOperationClass);\n        }\n    }\n\n    /**\n     * according to https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\n     */\n    private _dragOperationEnded(state:DragOperationState):boolean {\n\n        console.log(\"dnd-poly: drag operation end detected with \" + this._currentDragOperation);\n\n        if (DEBUG) {\n\n            var debug_class_user_selection = CLASS_PREFIX + \"immediate-user-selection\",\n                debug_class_drop_target = CLASS_PREFIX + \"current-drop-target\";\n\n            if (this._currentDropTarget) {\n                this._currentDropTarget.classList.remove(debug_class_drop_target);\n\n            }\n            if (this._immediateUserSelection) {\n                this._immediateUserSelection.classList.remove(debug_class_user_selection);\n            }\n        }\n\n        //var dropped:boolean = undefined;\n\n        // Run the following steps, then stop the drag-and-drop operation:\n\n        // If the current drag operation is \"none\" (no drag operation), or,\n        // if the user ended the drag-and-drop operation by canceling it (e.g. by hitting the Escape key), or\n        // if the current target element is null, then the drag operation failed.\n        const dragFailed = (this._currentDragOperation === DROP_EFFECTS[DROP_EFFECT.NONE]\n            || this._currentDropTarget === null\n            || state === DragOperationState.CANCELLED);\n        if (dragFailed) {\n\n            // Run these substeps:\n\n            // Let dropped be false.\n            //dropped = false;\n\n            // If the current target element is a DOM element, fire a DND event named dragleave at it;\n            if (isDOMElement(this._currentDropTarget)) {\n                this._dragDataStore._mode = DragDataStoreMode.PROTECTED;\n                this._dataTransfer.dropEffect = DROP_EFFECTS[DROP_EFFECT.NONE];\n                dispatchDragEvent(\"dragleave\", this._currentDropTarget, this._lastTouchEvent, this._dragDataStore, this._dataTransfer, false);\n            }\n\n            // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n            // otherwise, if it is not null, use platform-specific conventions for drag cancellation.\n            //else if( this.currentDropTarget !== null ) {\n            //}\n        }\n        // Otherwise, the drag operation was as success; run these substeps:\n        else {\n\n            // Let dropped be true.\n            //dropped = true;\n\n            // If the current target element is a DOM element, fire a DND event named drop at it;\n            if (isDOMElement(this._currentDropTarget)) {\n\n                // If the event is canceled, set the current drag operation to the value of the dropEffect attribute of the\n                // DragEvent object's dataTransfer object as it stood after the event dispatch finished.\n\n                this._dragDataStore._mode = DragDataStoreMode.READONLY;\n                this._dataTransfer.dropEffect = this._currentDragOperation;\n                if (dispatchDragEvent(\"drop\", this._currentDropTarget, this._lastTouchEvent, this._dragDataStore, this._dataTransfer) ===\n                    true) {\n\n                    this._currentDragOperation = this._dataTransfer.dropEffect;\n                }\n                // Otherwise, the event is not canceled; perform the event's default action, which depends on the exact target as follows:\n                else {\n\n                    // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n                    // If the current target element is a text field (e.g. textarea, or an input element whose type attribute is in the Text state)\n                    // or an editable element,\n                    // and the drag data store item list has an item with the drag data item type string \"text/plain\"\n                    // and the drag data item kind Plain Unicode string\n                    //if( ElementIsTextDropzone( this.currentDropTarget, this.dragDataStore ) ) {\n                    // Insert the actual data of the first item in the drag data store item list to have a drag data item type string of\n                    // \"text/plain\" and a drag data item kind that is Plain Unicode string into the text field or editable element in a manner\n                    // consistent with platform-specific conventions (e.g. inserting it at the current mouse cursor position, or inserting it at\n                    // the end of the field).\n                    //}\n                    // Otherwise\n                    //else {\n                    // Reset the current drag operation to \"none\".\n                    this._currentDragOperation = DROP_EFFECTS[DROP_EFFECT.NONE];\n                    //}\n                }\n            }\n            // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n            // otherwise, use platform-specific conventions for indicating a drop.\n            //else {\n            //}\n        }\n\n        return dragFailed;\n\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n        //if( this.dragend( this.sourceNode ) ) {\n        //    return;\n        //}\n\n        // Run the appropriate steps from the following list as the default action of the dragend event:\n\n        //if( !dropped ) {\n        //    return;\n        //}\n        // dropped is true\n\n        //if( this.currentDragOperation !== \"move\" ) {\n        //    return;\n        //}\n        //// drag operation is move\n        //\n        //if( ElementIsTextDropzone( this.currentDropTarget ) === false ) {\n        //    return;\n        //}\n        //// element is textfield\n        //\n        //// and the source of the drag-and-drop operation is a selection in the DOM\n        //if( this.sourceNode.nodeType === 1 ) {\n        //    // The user agent should delete the range representing the dragged selection from the DOM.\n        //}\n        //// and the source of the drag-and-drop operation is a selection in a text field\n        //else if( this.sourceNode.nodeType === 3 ) {\n        //    // The user agent should delete the dragged selection from the relevant text field.\n        //}\n        //// Otherwise, The event has no default action.\n    }\n\n    // dispatch dragend event and cleanup drag operation\n    private _finishDragOperation():void {\n        console.log(\"dnd-poly: dragimage snap back transition ended\");\n\n        // Fire a DND event named dragend at the source node.\n        this._dragDataStore._mode = DragDataStoreMode.PROTECTED;\n        this._dataTransfer.dropEffect = this._currentDragOperation;\n        dispatchDragEvent(\"dragend\", this._sourceNode, this._lastTouchEvent, this._dragDataStore, this._dataTransfer, false);\n\n        // drag operation over and out\n        this._dragOperationState = DragOperationState.ENDED;\n        this._cleanup();\n    }\n\n    //</editor-fold>\n}\n\n//</editor-fold>\n\n//<editor-fold desc=\"DataTransfer/DragDataStore\">\n\n/**\n * Polyfills https://html.spec.whatwg.org/multipage/interaction.html#drag-data-store-mode\n */\nconst enum DragDataStoreMode {\n    _DISCONNECTED, // adding an extra mode here because we need a special state to disconnect the data store from dataTransfer instance\n    READONLY,\n    READWRITE,\n    PROTECTED\n}\n\n/**\n * Polyfills https://html.spec.whatwg.org/multipage/interaction.html#the-drag-data-store\n */\ninterface DragDataStore {\n    _mode:DragDataStoreMode;\n    _data:{ [type:string]:any };\n    _types:Array<string>;\n    _effectAllowed:string;\n}\n\n/**\n * Polyfills https://html.spec.whatwg.org/multipage/interaction.html#datatransfer\n * TODO fail with errors when somebody uses it wrong so they know they are doing it wrong?\n */\nclass DataTransfer {\n\n    constructor(private _dataStore:DragDataStore,\n                private _setDragImageHandler:(image:Element, x:number, y:number) => void) {\n    }\n\n    private _dropEffect:string = DROP_EFFECTS[DROP_EFFECT.NONE];\n\n    //public get files():FileList {\n    //    return undefined;\n    //}\n    //\n    //public get items():DataTransferItemList {\n    //    return undefined;\n    //}\n\n    public get dropEffect() {\n        return this._dropEffect;\n    }\n\n    public set dropEffect(value) {\n        if (this._dataStore._mode !== DragDataStoreMode._DISCONNECTED\n            && ALLOWED_EFFECTS.indexOf(value) > -1) {\n            this._dropEffect = value;\n        }\n    }\n\n    public get types():ReadonlyArray<string> {\n        if (this._dataStore._mode !== DragDataStoreMode._DISCONNECTED) {\n            return Object.freeze(this._dataStore._types);\n        }\n    }\n\n    public get effectAllowed() {\n        return this._dataStore._effectAllowed;\n    }\n\n    public set effectAllowed(value) {\n        if (this._dataStore._mode === DragDataStoreMode.READWRITE\n            && ALLOWED_EFFECTS.indexOf(value) > -1) {\n            this._dataStore._effectAllowed = value;\n        }\n    }\n\n    public setData(type:string, data:string):void {\n        if (this._dataStore._mode === DragDataStoreMode.READWRITE) {\n\n            if (type.indexOf(\" \") > -1) {\n                throw new Error(\"illegal arg: type contains space\");\n            }\n\n            this._dataStore._data[type] = data;\n\n            if (this._dataStore._types.indexOf(type) === -1) {\n                this._dataStore._types.push(type);\n            }\n        }\n    }\n\n    public getData(type:string):string {\n        if (this._dataStore._mode === DragDataStoreMode.READONLY\n            || this._dataStore._mode === DragDataStoreMode.READWRITE) {\n            return this._dataStore._data[type] || \"\";\n        }\n    }\n\n    public clearData(format?:string):void {\n        if (this._dataStore._mode === DragDataStoreMode.READWRITE) {\n            // delete data for format\n            if (format && this._dataStore._data[format]) {\n                delete this._dataStore._data[format];\n                var index = this._dataStore._types.indexOf(format);\n                if (index > -1) {\n                    this._dataStore._types.splice(index, 1);\n                }\n                return;\n            }\n            // delete all data\n            this._dataStore._data = {};\n            this._dataStore._types = [];\n        }\n    }\n\n    public setDragImage(image:Element, x:number, y:number):void {\n        if (this._dataStore._mode === DragDataStoreMode.READWRITE) {\n            this._setDragImageHandler(image, x, y);\n        }\n    }\n}\n\n//</editor-fold>\n\n//<editor-fold desc=\"util\">\n\nexport interface Point {\n    x:number;\n    y:number;\n}\n\nfunction addDocumentListener(ev:string, handler:EventListener, passive:boolean = true) {\n\n    (document as EventTarget).addEventListener(ev, handler, supportsPassive ? {passive: passive} : false);\n}\n\nfunction removeDocumentListener(ev:string, handler:EventListener) {\n    document.removeEventListener(ev, handler);\n}\n\nfunction average(array:Array<number>) {\n    if (array.length === 0) {\n        return 0;\n    }\n    return array.reduce((function (s, v) {\n        return v + s;\n    }), 0) / array.length;\n}\n\nfunction isDOMElement(object:any) {\n    return object && object.tagName;\n}\n\nfunction isTouchIdentifierContainedInTouchEvent(newTouch:TouchEvent, touchIdentifier:number) {\n    for (let i = 0; i < newTouch.changedTouches.length; i++) {\n        const touch = newTouch.changedTouches[i];\n        if (touch.identifier === touchIdentifier) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction createDragEventFromTouch(targetElement:Element,\n                                  e:TouchEvent,\n                                  type:string,\n                                  cancelable:boolean,\n                                  window:Window,\n                                  dataTransfer:DataTransfer,\n                                  relatedTarget:Element = null) {\n\n    const touch:Touch = e.changedTouches[0];\n\n    const dndEvent:DragEvent = <DragEvent>new Event(type, {\n        bubbles: true,\n        cancelable: cancelable\n    });\n\n    // cast our polyfill\n    (dndEvent as any).dataTransfer = <any>dataTransfer;\n    (dndEvent as any).relatedTarget = relatedTarget;\n\n    // set the coordinates\n    (dndEvent as any).screenX = touch.screenX;\n    (dndEvent as any).screenY = touch.screenY;\n    (dndEvent as any).clientX = touch.clientX;\n    (dndEvent as any).clientY = touch.clientY;\n    (dndEvent as any).pageX = touch.pageX;\n    (dndEvent as any).pageY = touch.pageY;\n\n    const targetRect = targetElement.getBoundingClientRect();\n    (dndEvent as any).offsetX = dndEvent.clientX - targetRect.left;\n    (dndEvent as any).offsetY = dndEvent.clientY - targetRect.top;\n\n    return dndEvent;\n}\n\n/**\n * Calc center of polygon spanned by multiple touches in page (full page size, with hidden scrollable area) coordinates\n * or in viewport (screen coordinates) coordinates.\n */\nfunction updateCentroidCoordinatesOfTouchesIn(coordinateProp:string, event:TouchEvent, outPoint:Point):void {\n    const pageXs:Array<number> = [], pageYs:Array<number> = [];\n    for (let i = 0; i < event.touches.length; i++) {\n        const touch = event.touches[i];\n        pageXs.push(touch[coordinateProp + \"X\"]);\n        pageYs.push(touch[coordinateProp + \"Y\"]);\n    }\n    outPoint.x = average(pageXs);\n    outPoint.y = average(pageYs);\n}\n\nfunction prepareNodeCopyAsDragImage(srcNode:HTMLElement, dstNode:HTMLElement) {\n    // Is this node an element?\n    if (srcNode.nodeType === 1) {\n\n        // Clone the style\n        const cs = getComputedStyle(srcNode);\n        for (let i = 0; i < cs.length; i++) {\n            const csName = cs[i];\n            dstNode.style.setProperty(csName, cs.getPropertyValue(csName), cs.getPropertyPriority(csName));\n        }\n\n        // no interaction with the drag image, pls! this is also important to make the drag image transparent for hit-testing\n        // hit testing is done in the drag and drop iteration to find the element the user currently is hovering over while dragging.\n        // if pointer-events is not none or a browser does behave in an unexpected way than the hit test transparency on the drag image\n        // will break\n        dstNode.style.pointerEvents = \"none\";\n\n        // Remove any potential conflict attributes\n        dstNode.removeAttribute(\"id\");\n        dstNode.removeAttribute(\"class\");\n        dstNode.removeAttribute(\"draggable\");\n    }\n\n    // Do the same for the children\n    if (srcNode.hasChildNodes()) {\n        for (let i = 0; i < srcNode.childNodes.length; i++) {\n            prepareNodeCopyAsDragImage(<HTMLElement>srcNode.childNodes[i], <HTMLElement>dstNode.childNodes[i]);\n        }\n    }\n}\n\nfunction createDragImage(sourceNode:HTMLElement):HTMLElement {\n\n    const dragImage = <HTMLElement>sourceNode.cloneNode(true);\n\n    // this removes any id's and stuff that could interfere with drag and drop\n    prepareNodeCopyAsDragImage(sourceNode, dragImage);\n\n    // set layout styles for freely moving it around\n    dragImage.style.position = \"absolute\";\n    dragImage.style.left = \"0px\";\n    dragImage.style.top = \"0px\";\n    // on top of all\n    dragImage.style.zIndex = \"999999\";\n\n    // add polyfill class for default styling\n    dragImage.classList.add(CLASS_DRAG_IMAGE);\n    dragImage.classList.add(CLASS_DRAG_OPERATION_ICON);\n\n    return dragImage;\n}\n\nfunction extractTransformStyles(sourceNode:HTMLElement):string[] {\n\n    return TRANSFORM_CSS_VENDOR_PREFIXES.map(function (prefix) {\n\n        let transform = sourceNode.style[prefix + \"transform\"];\n\n        if (!transform || transform === \"none\") {\n            return \"\";\n        }\n\n        // TODO what about translateX(x), translateY(x), translateZ(z), translate3d(x,y,z), matrix(*,*,*,*,x,y) ?\n\n        // removes translate(x,y)\n        return transform.replace(/translate\\(\\D*\\d+[^,]*,\\D*\\d+[^,]*\\)\\s*/g, \"\");\n    });\n}\n\nfunction translateDragImage(dragImage:HTMLElement, pnt:Point, originalTransforms:string[], offset?:Point, centerOnCoordinates = true):void {\n\n    let x = pnt.x, y = pnt.y;\n\n    if (offset) {\n        x += offset.x;\n        y += offset.y;\n    }\n\n    if (centerOnCoordinates) {\n        x -= (parseInt(<any>dragImage.offsetWidth, 10) / 2);\n        y -= (parseInt(<any>dragImage.offsetHeight, 10) / 2);\n    }\n\n    // using translate3d for best performance\n    const translate = \"translate3d(\" + x + \"px,\" + y + \"px, 0)\";\n\n    for (let i = 0; i < TRANSFORM_CSS_VENDOR_PREFIXES.length; i++) {\n        const transformProp = TRANSFORM_CSS_VENDOR_PREFIXES[i] + \"transform\";\n        dragImage.style[transformProp] = translate + \" \" + originalTransforms[i];\n    }\n}\n\n/**\n * calculates the coordinates of the drag source and transitions the drag image to those coordinates.\n * the drag operation is finished after the transition has ended.\n */\nfunction applyDragImageSnapback(sourceEl:HTMLElement, dragImage:HTMLElement, dragImageTransforms:string[], transitionEndCb:Function):void {\n\n    const cs = getComputedStyle(sourceEl);\n\n    if (cs.visibility === \"hidden\" || cs.display === \"none\") {\n        console.log(\"dnd-poly: source node is not visible. skipping snapback transition.\");\n        // shortcut to end the drag operation\n        transitionEndCb();\n        return;\n    }\n    // add class containing transition rules\n    dragImage.classList.add(CLASS_DRAG_IMAGE_SNAPBACK);\n\n    const csDragImage = getComputedStyle(dragImage);\n    const durationInS = parseFloat(csDragImage.transitionDuration);\n    if (isNaN(durationInS) || durationInS === 0) {\n        console.log(\"dnd-poly: no transition used - skipping snapback\");\n        transitionEndCb();\n        return;\n    }\n\n    console.log(\"dnd-poly: starting dragimage snap back\");\n\n    // calc source node position\n    const rect = sourceEl.getBoundingClientRect();\n\n    const pnt:Point = {\n        x: rect.left,\n        y: rect.top\n    };\n\n    // add scroll offset of document\n    pnt.x += (document.body.scrollLeft || document.documentElement.scrollLeft);\n    pnt.y += (document.body.scrollTop || document.documentElement.scrollTop);\n\n    //TODO this sometimes fails.. find out when exactly and how to detect\n    pnt.x -= parseInt(cs.marginLeft, 10);\n    pnt.y -= parseInt(cs.marginTop, 10);\n\n    const delayInS = parseFloat(csDragImage.transitionDelay);\n    const durationInMs = Math.round((durationInS + delayInS) * 1000);\n\n    // apply the translate\n    translateDragImage(dragImage, pnt, dragImageTransforms, undefined, false);\n\n    setTimeout(transitionEndCb, durationInMs);\n}\n\n//</editor-fold>\n\n//<editor-fold desc=\"dnd spec util\">\n\n/**\n * Implements \"6.\" in the processing steps defined for a dnd event\n * https://html.spec.whatwg.org/multipage/interaction.html#dragevent\n */\nfunction determineDropEffect(effectAllowed:string, sourceNode:Element) {\n\n    // uninitialized\n    if (!effectAllowed) {\n\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n        //if( sourceNode.nodeType === 1 ) {\n        //\n        //return \"move\";\n        //}\n\n        // link\n        if (sourceNode.nodeType === 3 && (<HTMLElement>sourceNode).tagName === \"A\") {\n            return DROP_EFFECTS[DROP_EFFECT.LINK];\n        }\n\n        // copy\n        return DROP_EFFECTS[DROP_EFFECT.COPY];\n    }\n\n    // none\n    if (effectAllowed === ALLOWED_EFFECTS[EFFECT_ALLOWED.NONE]) {\n        return DROP_EFFECTS[DROP_EFFECT.NONE];\n    }\n    // copy or all\n    if (effectAllowed.indexOf(ALLOWED_EFFECTS[EFFECT_ALLOWED.COPY]) === 0 || effectAllowed === ALLOWED_EFFECTS[EFFECT_ALLOWED.ALL]) {\n        return DROP_EFFECTS[DROP_EFFECT.COPY];\n    }\n    // link\n    if (effectAllowed.indexOf(ALLOWED_EFFECTS[EFFECT_ALLOWED.LINK]) === 0) {\n        return DROP_EFFECTS[DROP_EFFECT.LINK];\n    }\n    // move\n    if (effectAllowed === ALLOWED_EFFECTS[EFFECT_ALLOWED.MOVE]) {\n        return DROP_EFFECTS[DROP_EFFECT.MOVE];\n    }\n\n    // copy\n    return DROP_EFFECTS[DROP_EFFECT.COPY];\n}\n\n/**\n * Reference https://html.spec.whatwg.org/multipage/interaction.html#dndevents\n */\nfunction dispatchDragEvent(dragEvent:string,\n                           targetElement:Element,\n                           touchEvent:TouchEvent,\n                           dataStore:DragDataStore,\n                           dataTransfer:DataTransfer,\n                           cancelable = true,\n                           relatedTarget:Element = null):boolean {\n\n    console.log(\"dnd-poly: dispatching \" + dragEvent);\n\n    if (DEBUG) {\n        var debug_class = CLASS_PREFIX + \"debug\",\n            debug_class_event_target = CLASS_PREFIX + \"event-target\",\n            debug_class_event_related_target = CLASS_PREFIX + \"event-related-target\";\n        targetElement.classList.add(debug_class);\n        targetElement.classList.add(debug_class_event_target);\n        if (relatedTarget) {\n            relatedTarget.classList.add(debug_class);\n            relatedTarget.classList.add(debug_class_event_related_target);\n        }\n    }\n\n    const leaveEvt = createDragEventFromTouch(targetElement, touchEvent, dragEvent, cancelable, document.defaultView, dataTransfer, relatedTarget);\n    const cancelled = !targetElement.dispatchEvent(leaveEvt);\n\n    dataStore._mode = DragDataStoreMode._DISCONNECTED;\n\n    if (DEBUG) {\n        targetElement.classList.remove(debug_class_event_target);\n        if (relatedTarget) {\n            relatedTarget.classList.remove(debug_class_event_related_target);\n        }\n    }\n\n    return cancelled;\n}\n\n/**\n * according to https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\n */\nfunction determineDragOperation(effectAllowed:string, dropEffect:string):string {\n\n    // unitialized or all\n    if (!effectAllowed || effectAllowed === ALLOWED_EFFECTS[7]) {\n        return dropEffect;\n    }\n\n    if (dropEffect === DROP_EFFECTS[DROP_EFFECT.COPY]) {\n        if (effectAllowed.indexOf(DROP_EFFECTS[DROP_EFFECT.COPY]) === 0) {\n            return DROP_EFFECTS[DROP_EFFECT.COPY];\n        }\n    }\n    else if (dropEffect === DROP_EFFECTS[DROP_EFFECT.LINK]) {\n        if (effectAllowed.indexOf(DROP_EFFECTS[DROP_EFFECT.LINK]) === 0 || effectAllowed.indexOf(\"Link\") > -1) {\n            return DROP_EFFECTS[DROP_EFFECT.LINK];\n        }\n    }\n    else if (dropEffect === DROP_EFFECTS[DROP_EFFECT.MOVE]) {\n        if (effectAllowed.indexOf(DROP_EFFECTS[DROP_EFFECT.MOVE]) === 0 || effectAllowed.indexOf(\"Move\") > -1) {\n            return DROP_EFFECTS[DROP_EFFECT.MOVE];\n        }\n    }\n\n    return DROP_EFFECTS[DROP_EFFECT.NONE];\n}\n\nfunction onDelayTouchstart(evt:TouchEvent) {\n\n    console.log(\"dnd-poly: setup delayed dragstart..\");\n\n    const el = evt.target;\n\n    const heldItem = () => {\n\n        console.log(\"dnd-poly: starting delayed drag..\");\n\n        end.off();\n        cancel.off();\n        scroll.off();\n        onTouchstart(evt);\n    };\n\n    const onReleasedItem = (event:Event) => {\n\n        console.log(\"dnd-poly: aborting delayed drag because of \" + event.type);\n\n        end.off();\n        cancel.off();\n        scroll.off();\n        clearTimeout(timer);\n    };\n\n    const timer = setTimeout(heldItem, config.holdToDrag);\n\n    const end = onEvt(el, 'touchend', onReleasedItem);\n    const cancel = onEvt(el, 'touchcancel', onReleasedItem);\n    const scroll = onEvt(window.document, 'scroll', onReleasedItem, true);\n}\n\nfunction onEvt(el:EventTarget, event:string, handler:EventListener, capture:boolean = false) {\n\n    const options = supportsPassive ? {passive: true, capture: capture} : capture;\n\n    el.addEventListener(event, handler, options);\n\n    return {\n        off() {\n            el.removeEventListener(event, handler, options as any);\n        }\n    };\n}\n\n//</editor-fold>\n\n//<editor-fold desc=\"dead dnd spec code\">\n\n/**\n * // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n */\n//public static ElementIsTextDropzone( element:HTMLElement, dragDataStore?:DragDataStore ) {\n//\n//    if( dragDataStore && !dragDataStore.data[ \"text/plain\" ] ) {\n//        return false;\n//    }\n//\n//    if( element.isContentEditable ) {\n//        return true;\n//    }\n//\n//    if( element.tagName === \"TEXTAREA\" ) {\n//        return true;\n//    }\n//\n//    if( element.tagName === \"INPUT\" ) {\n//        if( element.getAttribute( \"type\" ) === \"text\" ) {\n//            return true;\n//        }\n//    }\n//\n//    return false;\n//}\n\n/**\n * NO DROPZONE SUPPORT SINCE NATIVE IMPLEMENTATIONS IN BROWSERS ALSO DO NOT\n *\n * Helper method for recursively go from a nested element up the ancestor chain\n * to see if any element has a dropzone.\n */\n//private static FindDropzoneElement( element:HTMLElement ):HTMLElement {\n//\n//    if( !element || !element.hasAttribute || typeof element.hasAttribute !== \"function\" ) {\n//        return null;\n//    }\n//\n//    if( element.hasAttribute( \"dropzone\" ) ) {\n//        return element;\n//    }\n//\n//    if( element === window.document.body ) {\n//        return null;\n//    }\n//\n//    return DragOperationController.FindDropzoneElement( element.parentElement );\n//}\n\n/**\n * NO DROPZONE SUPPORT SINCE NATIVE IMPLEMENTATIONS IN BROWSERS ALSO DO NOT\n *\n * Polyfills https://html.spec.whatwg.org/multipage/interaction.html#the-dropzone-attribute\n * by implementing the dropzone processing steps.\n */\n//private static GetOperationForMatchingDropzone( element:HTMLElement, dragDataStore:DragDataStore ):string {\n\n// If the current target element is an element with a dropzone attribute that matches the drag data store and specifies an operation\n//      Set the current drag operation to the operation specified by the dropzone attribute of the current target element.\n// If the current target element is an element with a dropzone attribute that matches the drag data store and does not specify an operation\n//      Set the current drag operation to \"copy\".\n// Otherwise\n//      Reset the current drag operation to \"none\".\n//var value = element.getAttribute( \"dropzone\" );\n//if( !value ) {\n//\n//    return \"none\";\n//}\n//\n//var matched = false;\n//var operation;\n//var keywords = value.split( \" \" );\n//\n//for( var i:number = 0; i < keywords.length; i++ ) {\n//    var keyword = keywords[ i ];\n//\n//    if( keyword === \"copy\" || keyword === \"move\" || keyword === \"link\" ) {\n//        if( !operation ) {\n//            operation = keyword;\n//        }\n//        continue;\n//    }\n//\n//    if( keyword.length < 3 || keyword[ 1 ] !== \":\" ) {\n//        continue;\n//    }\n//\n//    var splitKeyword = keyword.split( \":\" );\n//    var kind = splitKeyword[ 0 ].toLowerCase();\n//    var type = splitKeyword[ 1 ].toLowerCase();\n//\n//    if( dragDataStore.types.indexOf( type ) > -1 ) {\n//        matched = true;\n//    }\n//}\n//\n//if( !matched ) {\n//    return \"none\";\n//}\n//\n//if( !operation ) {\n//    return \"copy\";\n//}\n//\n//return operation;\n//}\n\n//</editor-fold>\n"]}